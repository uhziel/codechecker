# -------------------------------------------------------------------------
#
#  Part of the CodeChecker project, under the Apache License v2.0 with
#  LLVM Exceptions. See LICENSE for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# -------------------------------------------------------------------------

import logging
import os
import xml.etree.ElementTree as ET

from ..output_parser import BaseParser, Message

LOG = logging.getLogger('ReportConverter')

class TscanCodeParser(BaseParser):
    """ Parser for TscanCode output. """

    def __init__(self):
        super(TscanCodeParser, self).__init__()

    def parse_messages(self, analyzer_result):
        """ Parse the given analyzer result. """

        tree = self.__parse_analyzer_result(analyzer_result)
        if tree is None:
            return

        for error in tree.find('errors'):
            message = self.__parse_error(error)
            if message:
                self.messages.append(message)

        return self.messages

    def __parse_analyzer_result(self, analyzer_result):
        """ Parse the given analyzer result xml file.

        Returns the root element of the parsed tree or None if something goes
        wrong.
        """
        try:
            return ET.parse(analyzer_result)
        except OSError:
            LOG.error("Analyzer result does not exist: %s", analyzer_result)
        except ET.ParseError:
            LOG.error("Failed to parse the given analyzer result '%s'. Please "
                      "give a valid xml file with messages generated by "
                      "tscancode --xml --xml-version=2.", analyzer_result)

    def __parse_error(self, error):
        """ Parse the given error and create a message from them. """

        file_path = error.get("file")
        line = int(error.get("line"))
        column = 0
        # severity = error.get("severity") TODO 没有找到传入 severity 的方法，后续待增强
        checker_name = error.get("id") + "." + error.get("subid")
        msg = error.get("msg")

        message = Message(
            file_path,
            line,
            column,
            msg,
            checker_name)
        return message
